#!/bin/bash

#检测是否存在name或tag为none的镜像，存在则删除

deleteresult=$(docker images | grep "none")
if [ "$deleteresult" != "" ]; then
    echo "delete some images where name or tag is [none]..."
    docker rmi -f $(docker images | awk '/^<none>/ { print $3 }')
fi

#停止运行容器
stopneteasecloudmusicapiresult=$(docker ps | grep "neteasecloudmusicapi")
if [ "$stopneteasecloudmusicapiresult" != "" ]; then
    echo "stop neteasecloudmusicapi..."
    docker stop neteasecloudmusicapi
    docker rm neteasecloudmusicapi
fi


#检测docker build neteasecloudmusicapi 是否成功
finailtime=0;
newtime=0;
#若存在 neteasecloudmusicapi（旧的） 则获取它生成的时间
if [ -f "$PWD/neteasecloudmusicapi" ]; then
	finailtime=$( ls --full-time neteasecloudmusicapi | cut -d" " -f6-7 | cut -c1,2,3,4,6,7,9,10,12,13,15,16,18,19)

fi

docker run --rm  -v "$PWD":/go/src/github.com/ActingCute/NeteaseCloudMusicApi -v "$PWD"/vendor:/go/src  -w /go/src/github.com/ActingCute/NeteaseCloudMusicApi golang:1.9 go build -o neteasecloudmusicapi main.go

#检测是否存在 neteasecloudmusicapi（新的） ，存在则获取它生成的时间；不存在则认为是使用 docker 命令 build 时失败
if [ -f "$PWD/neteasecloudmusicapi" ]; then
	newtime=$( ls --full-time neteasecloudmusicapi | cut -d" " -f6-7 | cut -c1,2,3,4,6,7,9,10,12,13,15,16,18,19)

else
		echo "Failed to build neteasecloudmusicapi with the docker command"
		exit
fi

#检测两次 neteasecloudmusicapi 的时间，时间相同认为是 build neteasecloudmusicapi 失败
if [ "$finailtime" = "$newtime" ]; then
	echo 'Failed to build neteasecloudmusicapi with the file(neteasecloudmusicapi) built time is identical'
	exit
else
	echo 'Successfully built neteasecloudmusicapi'
fi

docker build -t neteasecloudmusicapi . > dockerBuild.log

cat dockerBuild.log
ID=$(tail -1 dockerBuild.log | awk '{print $3;}')
docker tag  $ID neteasecloudmusicapi:`date +%Y%m%d.%H%M`

#判断 build docker 镜像是否成功
theinfo=$(tail -1 dockerBuild.log | awk 'END {print}')
inf="Successfully"
result=$(echo $theinfo | grep "${inf}")
if [ "$result" == "" ]; then
	exit
fi

echo "run neteasecloudmusicapi..."

docker run -d -p 8080:8080 --name="neteasecloudmusicapi" -v /neteasecloudmusicapi/log:/log -v /neteasecloudmusicapi/webData/upload:/neteasecloudmusicapi/upload -v /neteasecloudmusicapi/webData/conf:/neteasecloudmusicapi/conf neteasecloudmusicapi > dockerBuild.log

#检测neteasecloudmusicapi容器是否运行成功
startneteasecloudmusicapiresult=$(docker ps | grep "neteasecloudmusicapi")
if [ "$startneteasecloudmusicapiresult" != "" ]; then
    echo "successfully run neteasecloudmusicapi..."
fi

exit
